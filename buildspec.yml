version: 0.2

phases:
 install:
  runtime-versions:
   python: 3.8
  commands:
   - pip3 install coverage unittest2
 pre_build:
  commands:
   - echo Running test cases ...
   - coverage run -m unittest tests/*
   - coverage xml
   - echo Logging in to Amazon ECR...
   - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com
 build:
  commands:
   - echo Build started on `date`
   - echo Building the Docker image...
   - echo Image tag - latest
   - echo Branch ame - $BRANCH_NAME
   - echo Image URI - $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/cryptobot-$BRANCH_NAME:latest
   - docker build -t cryptobot-$BRANCH_NAME:latest . --build-arg APP_SECRET_KEY=$APP_SECRET_KEY --build-arg APP_SETTINGS=$APP_SETTINGS --build-arg BINANCE_API_KEY=$BINANCE_API_KEY --build-arg BINANCE_SECRET_KEY=$BINANCE_SECRET_KEY --build-arg TG_BOT_TOKEN=$TG_BOT_TOKEN --build-arg TG_USER_ID=$TG_USER_ID --build-arg WEBHOOK_URL=$WEBHOOK_URL --build-arg DB_URI=$DB_URI
   - docker tag cryptobot-$BRANCH_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/cryptobot-$BRANCH_NAME:latest
 post_build:
  commands:
   - echo Build completed on `date`
   - echo Pushing the Docker image...
   - docker push $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/cryptobot-$BRANCH_NAME:latest
   - printf '[{"name":"cryptobot-%s","imageUri":"%s"}]' $BRANCH_NAME $AWS_ACCOUNT_ID.dkr.ecr.eu-west-1.amazonaws.com/cryptobot-$BRANCH_NAME:latest > imagedefinitions.json

artifacts:
 files: imagedefinitions.json

reports:
 coverage_reports:
  files:
   - coverage.xml
  base-directory: /
  file-format: JUNITXML
